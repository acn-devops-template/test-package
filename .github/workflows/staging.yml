name: staging

on:
  workflow_dispatch:
  pull_request:
    types: [closed]
    branches:
      - staging

jobs:
  staging-ci-pipeline:
    # if: github.event.pull_request.merged == true
    # runs-on: ${{ github.event.pull_request.merged && fromJSON('ubuntu-20.04') || 'self-hosted-dev' }}
    runs-on: self-hosted-dev
    outputs:
      pk_name: ${{ steps.version.outputs.DATAX_REPO_NAME }}
      pk_version: ${{ steps.version.outputs.DATAX_PACKAGE_VERSION }}

    env:
      DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
      DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
      DATABRICKS_JOBS_API_VERSION: 2.1 # Use Job API 2.1 instead of 2.0
      GH_TOKEN: ${{ secrets.GH_PAT_ADM }}
      NODE_EXTRA_CA_CERTS: /etc/ssl/certs/ca-certificates.crt

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: staging

      - name: Checkout tools repo
        uses: actions/checkout@v2
        with:
          repository: analytics-products-customer360/customer360-dp
          token: ${{ secrets.GH_PAT_ADM }}
          path: actions

      - uses: ./actions/ssh-agent
        with:
          ssh-private-key: |
            ${{ secrets.SEMANTIC_RELEASE_SSH_KEY }}
            ${{ secrets.UTILS_DATA_LAYER_SSH_KEY }}
            ${{ secrets.DEPLOYMENT_HELPER_SSH_KEY }}

      - uses: ./actions/setup-git-user

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Install pip
        run: |
          pip install pip -U
          pip install pipenv -U
          pip install virtualenv -U

      - name: Install poetry
        uses: ./actions/install-poetry

      - name: Install dependencies and project
        run: |
          poetry install -v --without dev,test,docs

      # - name: Semantic Release Prerelease
      #   run: |
      #     poetry run semantic-release publish -D branch="${{ github.event.pull_request.base.ref }}" -D remove_dist=true --prerelease -v DEBUG

      # - name: Sync back to Dev
      #   run: |
      #     git checkout dev
      #     git merge ${{ github.event.pull_request.base.ref }}
      #     git push
      #     git checkout ${{ github.event.pull_request.base.ref }}

      - name: Intrgration Test
        run: |
          echo "Test specific package from prerelease feed"
          echo "DBX deploy"
          echo "Monitoring"

      - name: Set package version & repo name into env var
        id: version
        run: |
          pk_version=$(poetry version --dry-run -s)
          echo $pk_version
          echo "::set-output name=DATAX_PACKAGE_VERSION::$pk_version"
          echo ${{ github.event.repository.name }}
          echo "::set-output name=DATAX_REPO_NAME::${{ github.event.repository.name }}"


  staging-cd-pipeline:
    if: ${{ always() }}
    needs: [ staging-ci-pipeline ]
    runs-on: self-hosted-ai-c360stg
    steps: 
      - name: run
        shell: bash
        run: |
          hostname
          echo "${{ needs.staging-ci-pipeline.outputs.pk_name }}${{ needs.staging-ci-pipeline.outputs.pk_version }}"

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: staging

      # - name: Copy init scripts & overwrite
      #  run: |
      #    databricks fs cp -r ./setup/dlt_deployment/init_scripts dbfs:/databricks/scripts/${{ github.event.repository.name }}/init-scripts --overwrite

      # - name: Update the relevant notebook sources
      #   run: |
      #     databricks repos update --path="/Repos/datax-gp-cardx-credit-card/setup/dlt_deployment/notebooks/" --branch="${{ github.event.pull_request.base.ref }}"

      # - name: Job deployment
      #   run: |
      #     poetry run dbx configure --enable-inplace-jinja-support
      #     poetry run dbx deploy --jinja-variables-file=conf/orchestrator/dbx/staging_setting.yml --deployment-file=./conf/orchestrator/dbx/deployment.yml.j2 --workflows=credit-card-workflow,multiple-srcs-workflow --no-package
