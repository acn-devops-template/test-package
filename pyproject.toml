[tool.poetry]
name = "datax-utils-deployment-helper"
version = "0.3.3"
description = "common lib for deployment-related"
authors = ["Your Name <you@example.com>"]
readme = "README.md"
packages = [{ include = "datax", from = "src" }]

[tool.poetry.dependencies]
python = "^3.8"
pyspark = { version = "3.2.1", source = "PyPI" }
pydantic = { version = "^1.10.2", source = "PyPI" }

[tool.poetry.group.test.dependencies]
pre-commit = { version = "^2.20.0", source = "PyPI" }
pytest = { version = "^7.0.0", source = "PyPI" }
pytest-mock = { version = "^3.7.0", source = "PyPI" }

[tool.poetry.group.release.dependencies]
datax-semantic-release = { git = "https://github.com/datax-tmp/datax-semantic-release.git" }

[tool.poetry.group.docs.dependencies]
mkdocs = { version = "^1.4.2", source = "PyPI" }
mkdocs-material = { version = "^8.5.9", source = "PyPI" }
mkdocs-git-revision-date-localized-plugin = { version = "^1.1.0", source = "PyPI" }
mknotebooks = { version = "^0.7.1", source = "PyPI" }
mkdocstrings = { version = "^0.19.0", source = "PyPI" }
mkdocstrings-python = { version = "^0.7.1", source = "PyPI" }
mkdocs-section-index = { version = "^0.3.4", source = "PyPI" }
mkdocs-literate-nav = { version = "^0.5.0", source = "PyPI" }
mkdocs-gen-files = { version = "^0.4.0", source = "PyPI" }
mike = { version = "^1.1.2", source = "PyPI" }
mkdocs-table-reader-plugin = { version = "^1.2", source = "PyPI" }
interrogate = { version = "^1.5.0", source = "PyPI" }

[tool.poetry.group.dev.dependencies]
jupyter = { version = "^1.0.0", source = "PyPI" }

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.black]
line-length = 90
force-exclude = "/(docs|conf|experiments|setup)/"


[tool.isort]
profile = "black"
known_pyspark = ["pyspark"]
known_datax = ["datax"]
sections = [
    "FUTURE",
    "STDLIB",
    "PYSPARK",
    "DATAX",
    "FIRSTPARTY",
    "THIRDPARTY",
    "LOCALFOLDER",
]
import_heading_stdlib = "import: standard" # a module as part of Python's standard library.
import_heading_pyspark = "import: pyspark"
import_heading_datax = "import: datax in-house"
import_heading_firstparty = "import: internal" # a module as being part of the current python project.
import_heading_future = "import: future" # a module as part of Python's internal future compatibility libraries. 
import_heading_thirdparty = "import: external" # a module as being part of a third party library.
import_heading_localfolder = "import: private/local" # a module as being a local folder. Generally, this is reserved for relative imports (from . import module).
force_single_line = "true"
include_trailing_comma = "true"
line_length = 90
skip_glob = ["docs/*", "conf/*", "experiments/*", "setup/*"]

[tool.pytest.ini_options]
pythonpath = ["src"]

[tool.semantic_release]
version_variable = ["src/datax/utils/deployment_helper/__init__.py:__version__"]
version_toml = "pyproject.toml:tool.poetry.version"
changelog_file = "CHANGELOG.md"
build_command = "poetry build -f wheel"
major_on_zero = false
upload_to_release = true
upload_to_repository = false
branch = "main"

[tool.flakeheaven]
max-line-length = 90
max-complexity = 18
exclude = ["README.md", "experiments/*", "docs/*", "conf/*", "setup/*"]
# https://github.com/flakehell/flakehell/issues/10#issuecomment-822720074
extended_default_ignore = []

[tool.flakeheaven.plugins]
pycodestyle = [
    "+B*",
    "+C*",
    "+E*",
    "+F*",
    "+W*",
    "+T4*",
    "-E203",
    "-E266",
    "-E501",
    "-W503",
    "-F403",
    "-F401",
]
pyflakes = [
    "+B*",
    "+C*",
    "+E*",
    "+F*",
    "+W*",
    "+T4*",
    "-E203",
    "-E266",
    "-E501",
    "-W503",
    "-F403",
    "-F401",
]

[tool.mypy] # only run on src
ignore_missing_imports = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_untyped_decorators = true
disallow_incomplete_defs = true
no_strict_optional = true
show_error_context = true
pretty = true
scripts_are_modules = true
disable_error_code = ["call-arg"]

[tool.interrogate]
ignore-init-method = false                                  # Ignore __init__ method of classes. [default: False]
ignore-init-module = false                                  # Ignore __init__.py modules. [default: False]
ignore-magic = false                                        # Ignore all magic methods of classes. [default: False]
ignore-semiprivate = false                                  # Ignore semiprivate classes, methods, and functions starting with a single underscore.
ignore-private = false                                      # Ignore private classes, methods, and functions starting with two underscores. [default: False]
ignore-property-decorators = false                          # Ignore methods with property setter/getter decorators. [default: False]
ignore-module = false                                       # Ignore module-level docstrings. [default: False]
ignore-nested-functions = false                             # Ignore nested functions and methods. [default: False]
ignore-nested-classes = true                                # Ignore nested classes. [default: False]
ignore-setters = false                                      # Ignore methods with property setter decorators. [default: False]
fail-under = 90                                             # Fail when coverage % is less than a given amount. [default: 80.0]
exclude = ["setup", "docs", "experiments", "conf", "build"]
verbose = 0                                                 # possible values: 0 (minimal output), 1 (-v), 2 (-vv)
quiet = false                                               # Do not print output [default: False]
whitelist-regex = []
color = true                                                # Toggle color output on/off when printing to stdout. [default: color] or no-color
omit-covered-files = false                                  # Omit reporting files that have 100% documentation coverage.
ignore-regex = []
# generate-badge = "./interrogate_badge.svg"                  # Generate a shields.io status badge (an SVG image) in at a given file or directory.
# badge-format = "svg"
